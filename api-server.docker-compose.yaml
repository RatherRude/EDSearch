version: "3.7"

services:
  api-server:
    build:
      context: .
      dockerfile: api-server.dockerfile
    ports:
      - "127.0.0.1:5001:5000"
    depends_on:
      - postgres
    env_file:
      - .env
    environment:
      DATABASE_URL: dbname=edsearch user=postgres password=password host=postgres port=5432

  ingest-worker:
    build:
      context: .
      dockerfile: api-server.dockerfile
    ports:
      - "127.0.0.1:5002:5000"
    depends_on:
      - postgres
    env_file:
      - .env
    environment:
      DATABASE_URL: dbname=edsearch user=postgres password=password host=postgres port=5432
    command: ["python3", "-m", "src.Ingest"]

  ingest-cron:
    image: alpine:latest
    command: >
      sh -c "
        # Install curl so we can execute the request.
        apk add --no-cache curl >/dev/null 2>&1 &&
        # Append a cron entry to the root crontab.
        echo '0 6 * * * curl -X POST http://ingest-worker:5000/ingest -H "Content-Type: application/json" -d \'{"url":"https://downloads.spansh.co.uk/galaxy_populated.json.gz"}\'' > /etc/crontabs/root &&
        # Run cron in the foreground, at log level 2.
        crond -f -l 2
      "
    restart: unless-stopped
    depends_on:
      - ingest-worker

  postgres:
    build:
      context: .
      dockerfile: postgres.dockerfile
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: edsearch
    ports:
      - "127.0.0.1:5432:5432"

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@localhost.lan
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    ports:
      - "127.0.0.1:5050:80"
    depends_on:
      - postgres
#  caddy:
#    image: caddy:2
#    ports:
#      - "8080:80"
#      - "8443:443"
#    configs:
#      - source: Caddyfile
#        target: /etc/caddy/Caddyfile
#    depends_on:
#      - api-server
#      - ingest-worker
#      - pgadmin
#
#configs:
#  Caddyfile:
#    content: |
#      ${EDSEARCH_DOMAIN:-localhost} {
#        reverse_proxy http://api-server:5000
#      }

volumes:
  db-data:
